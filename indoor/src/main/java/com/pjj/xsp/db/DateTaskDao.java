package com.pjj.xsp.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATE_TASK".
*/
public class DateTaskDao extends AbstractDao<DateTask, Long> {

    public static final String TABLENAME = "DATE_TASK";

    /**
     * Properties of entity DateTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Date = new Property(0, String.class, "date", false, "DATE");
        public final static Property Hour = new Property(1, String.class, "hour", false, "HOUR");
        public final static Property Id = new Property(2, Long.class, "id", false, "ID");
        public final static Property _id = new Property(3, Long.class, "_id", true, "_id");
        public final static Property LimitTag = new Property(4, String.class, "limitTag", false, "LIMIT_TAG");
    }

    private Query<DateTask> taskText_DateTaskListQuery;

    public DateTaskDao(DaoConfig config) {
        super(config);
    }
    
    public DateTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATE_TASK\" (" + //
                "\"DATE\" TEXT NOT NULL ," + // 0: date
                "\"HOUR\" TEXT," + // 1: hour
                "\"ID\" INTEGER NOT NULL ," + // 2: id
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 3: _id
                "\"LIMIT_TAG\" TEXT NOT NULL );"); // 4: limitTag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATE_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DateTask entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getDate());
 
        String hour = entity.getHour();
        if (hour != null) {
            stmt.bindString(2, hour);
        }
        stmt.bindLong(3, entity.getId());
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(4, _id);
        }
        stmt.bindString(5, entity.getLimitTag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DateTask entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getDate());
 
        String hour = entity.getHour();
        if (hour != null) {
            stmt.bindString(2, hour);
        }
        stmt.bindLong(3, entity.getId());
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(4, _id);
        }
        stmt.bindString(5, entity.getLimitTag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    @Override
    public DateTask readEntity(Cursor cursor, int offset) {
        DateTask entity = new DateTask( //
            cursor.getString(offset + 0), // date
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // hour
            cursor.getLong(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // _id
            cursor.getString(offset + 4) // limitTag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DateTask entity, int offset) {
        entity.setDate(cursor.getString(offset + 0));
        entity.setHour(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.getLong(offset + 2));
        entity.set_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setLimitTag(cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DateTask entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DateTask entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DateTask entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dateTaskList" to-many relationship of TaskText. */
    public List<DateTask> _queryTaskText_DateTaskList(Long id) {
        synchronized (this) {
            if (taskText_DateTaskListQuery == null) {
                QueryBuilder<DateTask> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                taskText_DateTaskListQuery = queryBuilder.build();
            }
        }
        Query<DateTask> query = taskText_DateTaskListQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
